// a .box is a list of links.
// a .box__link is one of those links. Big, chunky, clickable.

.box {
  // prevent first link from being
  // pulled up out of parent
  padding-top: $l-border;

  // this pulls boxes into page gutter when space
  // is very valuable
  margin-left: -($l-page-gutter + $l-border);
  margin-right: -($l-page-gutter + $l-border);

  @include safe-mq("(min-width: #{$mq-remove-box-cancel})") {
    // we have more space here, so we can cancel
    // the "pulling into margin" business
    margin-left: 0;
    margin-right: 0;
  }
}

.box__item {
  // contain pseudo-elements
  position: relative;

  &:before {
    // fade for overflowing content
    content: '';
    background: linear-gradient(to right, rgba($c-bg, 0), rgba($c-bg, 1) 50%);

    // don't block clicks!
    pointer-events: none;

    position: absolute;
    z-index: $zi-box-fade;

    width: $l-fade-width;

    top: $l-border;
    right: $l-border;

    // border width plus some extra room to try and not cover up scrollbars
    bottom: $l-border + 30px;
  }
}

.box__title {
  color: $c-primary;
  font-size: ms(1);
  line-height: 1.2;
  font-weight: bold;

  position: relative;
  z-index: $zi-box-contents;
}

.box__url {
  color: $c-secondary;

  position: relative;
  z-index: $zi-box-contents;

  white-space: pre;

  &:after {
    // for overflow, this adds a little space
    // between the overflowing text and the
    // far-right edge of the scrollable area
    content: '';
    padding-left: $l-fade-width;
  }
}

.box__link {
  display: block;
  border: $l-border solid $c-primary;

  // magic number, first value is related to height of controls
  padding: ms(2) ms();

  // prevent border overlap
  margin-top: -($l-border);

  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

.box__controls {
  position: absolute;
  z-index: $zi-box-controls;

  top: ($l-border * 2);
  right: ($l-border * 2);

  overflow: hidden;
}

.box__controls__inner {
  /* transform: translate(100%, 0); */
  /* transition: transform 0.25s; */

  /* .box__item:hover & { */
    /* transform: translate(($l-border * 2), 0); */

    /* // only delay when hovered */
    /* transition-delay: 0.25s; */
  /* } */
}

.box__control {
}

.box__edit {
  float: right;
  margin-left: -($l-border--sm);

  &:focus,
  &:hover {
    // since borders are overlapping,
    // this raises element on focus/hover,
    // preventing preceding element from covering
    // up the changed border color
    position: relative;
  }
}

.box__delete {
  float: left;
}
